匈牙利算法：
(1)	基本原理：如图所示为一个二分图，相当于一列男一列女进行婚配，从男开始，从其可建立关系的第一个女生开始，如果互相都没有建立关系，则进行配对。然后继续下一个男生同样遍历可建立关系的女生，直到第3个男生，因为其只可匹配2女，所以为了匹配最大，找到1男如果其有除2女外其他可建立关系，就解除与2女的配对，与4女配对，然后返回3男与2女建立关系，重复此过程直到结束。
 
 
#include<iostream>

#include<cstring>

#include<algorithm>

using namespace std;

const int N=510,M=1e5+10;

int h[N],e[M],ne[M],idx;

bool st[N];          //判重，不要重复配对一个女生，好马不吃回头草

int match[N];       //女匹配的是谁

int n1,n2,m;

void add(int a,int b)

{

    e[idx]=b,ne[idx]=h[a],h[a]=idx++;
    
}

bool find(int x)

{

    for(int i=h[x];i!=-1;i=ne[i])
    
    {
    
        int j=e[i];
        
        if(!st[j])
        
        {
        
            st[j]=true;           //标记为已考虑过
            
            if(match[j]==0||find(match[j]))      //没有匹配对象，或者可以给匹配的男生找到下家
            
            { 
            
                match[j]=x;
                
                return true;
                
            }
            
        }
        
    }
    
    return false;
    
}

int main()

{

    scanf("%d%d%d",&n1,&n2,&m);
  
    
    memset(h,-1,sizeof h);
    
    while(m--)
    {
        int a, b;
        scanf("%d%d",&a,&b);
        add(a,b);
    }
    
    int res=0;
    
    for(int i=1;i<=n1;i++)
    {
        memset(st,false,sizeof st);     //每次清空判重,因为对应不同男生
        
        if(find(i)) res++;
    }
    
    printf("%d\n",res);
    return 0;
}
质数：
(1)	质数判定——试除法(O(sqrt(n))
基本原理：如果一个数只包含1和它本身两个约数，那么便称为质数。约数有一个性质它总是成对出现的，那么我只需要除以约数的一半即可，设d为约数d=n/d时便是其分界线，即d=(n)^1/2。
示例：
 
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;

bool is_prime(int x)
{
    if(x<2) return false;
    
    //如果直接加在判断条件里会降低运算的速度，每次都要算一遍，也不能写成i*i<=x的形式可能会溢出，因为数据范围是正好在int的边界
for(int i=2;i<=m;i++)        
if(x%i==0)return false;
    
    return true;
}
int main()
{
    int n,a;
    scanf("%d",&n);
    while(n--)
    {
        scanf("%d",&a);
        if(is_prime(a)) printf("Yes\n");
        else printf("No\n");
    }
    return 0;
}
(2)	分解质因数——试除法
基本原理：任意一个数n可以分解为多个质因数的乘积，其中质因数最多只有一个大于sqrt(n)(有两个肯定乘积大于n)，循环里面的 i 一定是一个质数：假如 i 是一个合数，那么它一定可以分解成多个质因子相乘的形式，这多个质因子同时也是 a 的质因子且比 i 要小，而比 i 小的数在之前的循环过程中一定是被条件除完了的，所以 i 不可能是合数，只可能是质数。
如何证明剩下的最后一个数是质数，由判定条件i<=n/i可知（最后退出一定满足i*i>n），在此之前已经除过小于sqrt(n)的质数，所以其必定为质因数。
示例：
 
#include<iostream>
#include<algorithm>

using namespace std;

void divide(int n)
{
     for(int i=2;i<=n/i;i++)        //每次除去质因数然后求其除去后值的质因数，并且每个数都只有一个大于sqrt(n)的质因数，所判定i>n/i循环结束后如果n>1说明还剩下最后一个质因数n
    {
        if(n%i==0)
        {
            int s=0;
            while(n%i==0)
            {
                n/=i;
                s++;
            }
            printf("%d %d\n",i,s);
        }
    }
    if(n>1) printf("%d %d\n",n,1);
    printf("\n");
}
int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int x;
        scanf("%d",&x);
        divide(x);
    }
   
    return 0;
}
